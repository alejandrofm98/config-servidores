def llamaFuncion = gitGetTags()
def gitUrl = 'https://github.com/alejandrofm98/restaurantqr-frontend.git'
def sshKeyGit = 'ssh_key_git'
def secrets = ''
def lastVersion = false

properties([
        parameters([
                [
                        $class    : 'ChoiceParameter',
                        choiceType: 'PT_SINGLE_SELECT',
                        name      : 'Entorno',
                        script    : [
                                $class: 'GroovyScript',
                                script: [
                                        classpath: [],
                                        sandbox  : true,
                                        script   : 'return ["desarrollo","produccion"]'
                                ]
                        ]
                ],
                [
                        $class              : 'CascadeChoiceParameter',
                        choiceType          : 'PT_SINGLE_SELECT',
                        name                : 'Version',
                        referencedParameters: 'Entorno',
                        script              : [
                                $class: 'GroovyScript',
                                script: [
                                        classpath: [],
                                        sandbox  : false,
                                        script   : "$llamaFuncion"
                                ]
                        ]
                ],

        ])
])

pipeline {
    agent any
    tools { nodejs "Node21" }
    stages {
        stage('Clone Repository') {
            steps {
                script {
                    sh 'rm -f frontend.tar.gz'
                    def versiones = Eval.me('Entorno', Entorno, llamaFuncion)
                    Map<String, String> mapEntornos = new HashMap<String, String>()
                    mapEntornos.put("desarrollo", "develop")
                    mapEntornos.put("produccion", "main")

                    println('DESCARGANDO ULTIMO COMMIT DE LA RAMA ' + mapEntornos.get(Entorno))
                    git(
                            url: gitUrl,
                            branch: mapEntornos.get(Entorno),
                            credentialsId: sshKeyGit,
                            changelog: true
                    )

                }
            }
        }

        stage('Copyng .env to repository dir') {
            steps {
                echo 'Copiando el fichero .env en la carpeta del repositorio'
                script {
                    secrets = 'secrets_frontend_' + Entorno
                    withCredentials([file(credentialsId: secrets, variable: 'secretFile')]) {
                        // Read the original properties file
                        println("PINTANDO .ENV " + secretFile)
                        writeFile(file: ".env." + Entorno, text: readFile(secretFile), encoding: 'UTF-8')
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    withCredentials([sshUserPrivateKey(credentialsId: sshKeyGit, keyFileVariable: 'SSH_KEY')]) {
//                        sh 'npm install --frozen-lockfile'
//                        sh 'npm run build'
                        tar file: 'frontend.tar.gz'
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                script {
                    println('Levantando aplicaciÃ³n en entorno ' + Entorno)
                    def sshServer = 'ssh_servidor_' + Entorno
                    sshPublisher(publishers: [sshPublisherDesc(configName: sshServer, transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+',
                            remoteDirectory: '/desplegar/restaurantqr-frontend', remoteDirectorySDF: false, removePrefix: 'target', sourceFiles: 'frontend.tar.gz')],
                            usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
                }
            }
        }
    }
}

def gitGetTags() {
    def loadScript =
            """
    try {
        def gettags = ('git ls-remote -t https://github.com/alejandrofm98/restaurantqr-frontend.git').execute()
        def tags = gettags.text.readLines().collect { it.split()[1].replaceAll('refs/tags/', '').replaceAll('\\\\^\\\\{}', '')}.unique()
        tags = tags.sort {s-> s.size()}.reversed()
        for (int x = tags.size()-1; x >= 10; x--){
            tags.remove(x)
        }
        def proyectName = "demo-"
        def firstValueNumber = tags.first.replace(proyectName,"").split("\\\\.")
        tags.add(0,proyectName+firstValueNumber[0]+"."+firstValueNumber[1]+"."+(firstValueNumber[2].toInteger()+1).toString())
        if (Entorno.equals("desarrollo"))
            tags = tags.collect(){it+"-SNAPSHOT"}
        return tags
    }catch (Exception e) {
        return [e.dump()]
    }
    """
    return "${loadScript}"
}
